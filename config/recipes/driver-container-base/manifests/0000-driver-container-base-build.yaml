apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: {{.SpecialResource.Name}}
  name: {{.SpecialResource.Name}}
spec: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.SpecialResource.Name}}-buildah-helper
data:
  buildah-helper.sh: |-
    #!/bin/bash -x 

    CNT=
    MNT=

    MOUNT_MACHINE_OS_CONTENT() { export MOC=$(buildah --authfile /var/lib/kubelet/config.json  --storage-driver vfs from {{.OSImageURL}}); export MOCMNT=$(buildah --storage-driver vfs mount $MOC); }
    UMOUNT_MACHINE_OS_CONTENT() { buildah --storage-driver vfs umount $MOC;  }


    FROM() { export CNT=$(buildah --storage-driver vfs from $1); }

    MOUNT() { export MNT=$(buildah --storage-driver vfs mount $CNT); }
    UMOUNT() { buildah --storage-driver vfs umount $CNT; }

    ENV() { buildah config --env $@; }
    RUN() { buildah --storage-driver vfs --isolation chroot run --user 0 $CNT -- $@; }
    RUNV() { buildah --storage-driver vfs --isolation chroot run --volume /etc/pki/entitlement-host:/etc/pki/entitlement:z --volume ${MOCMNT}:/extensions:z --user 0 $CNT -- $@; }
    COPY() { buildah --storage-driver vfs copy $CNT $@; }
    COMMIT() { buildah --storage-driver vfs commit $CNT $1; }
    ENTRYPOINT() { buildah config --entrypoint $1 $CNT; }
    WORKINGDIR() { buildah --storage-driver vfs config --workingdir $1 $CNT; }
    PUSH() { buildah --storage-driver vfs push --tls-verify=false --authfile /root/.dockercfg  $@; }


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.SpecialResource.Name}}-install-dependencies
data:
  install-dependencies.sh: |-
    #!/bin/bash -x
    
    set -e 

    UNAME=$(uname -r)

    echo "Enabling RHOCP and EUS RPM repos..."
    yum config-manager --set-enabled rhocp-{{.ClusterVersionMajorMinor}}-for-rhel-8-x86_64-rpms || true
    if ! yum makecache  --releasever={{.OperatingSystemDecimal}}; then 
      yum config-manager --set-disabled rhocp-{{.ClusterVersionMajorMinor}}-for-rhel-8-x86_64-rpms 
    fi 

    yum config-manager --set-enabled rhel-8-for-x86_64-baseos-eus-rpms || true
    if ! yum makecache  --releasever={{.OperatingSystemDecimal}}; then 
      yum config-manager --set-disabled rhel-8-for-x86_64-baseos-eus-rpms
    fi 

    # First update the base container to latest versions of everything
    yum update -y --releasever={{.OperatingSystemDecimal}}

    # Additional packages that are mandatory for driver-containers
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install elfutils-libelf-devel kmod binutils


    # Try to enable EUS and try to install kernel-devel and kernel-headers RPMs
    if yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install \
      kernel-devel-${UNAME} kernel-headers-${UNAME} kernel-core-${UNAME} kernel-modules-${UNAME} \
      kernel-modules-extra-${UNAME}
    then
      echo "EUS - kernel-devel kernel-headers kernel-core kernel-modules kernel-modules-extra installed"
      exit 0
    fi

    # If EUS fails get kernel-devel and kernel-headers from machine-os-content
    echo "EUS and/or rhocp-{{.ClusterVersionMajorMinor}} FAILED - installing from machine-os-content"

    KERNEL_DEVEL=$(find /extensions -name kernel-devel-${UNAME}.rpm -exec ls {} \; | tail -n1)
    KERNEL_HEADERS=$(find /extensions -name kernel-headers-${UNAME}.rpm -exec ls {} \; | tail -n1) 
    KERNEL_CORE=$(find /extensions -name kernel-core-${UNAME}.rpm -exec ls {} \; | tail -n1)
    KERNEL_MODULES=$(find /extensions -name kernel-modules-${UNAME}.rpm -exec ls {} \; | tail -n1)
    KERNEL_MODULES_EXTRA=$(find /extensions -name kernel-modules-extra-${UNAME}.rpm -exec ls {} \; | tail -n1)
    
    # On a 4.5 cluster we only have a subset of these available
    # If they are empty yum will fail anyway, so I do not see the purpose of checking ! -z ...
    # [ ! -z $KERNEL_DEVEL ]
    # [ ! -z $KERNEL_HEADERS ]
    # [ ! -z $KERNEL_CORE ]
    # [ ! -z $KERNEL_MODULES ]
    # [ ! -z $KERNEL_MODULES_EXTRA ]

    # Installation order is important leave this as is 
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install $KERNEL_CORE 
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install $KERNEL_DEVEL
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install $KERNEL_HEADERS
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install $KERNEL_MODULES
    yum -y --releasever={{.OperatingSystemDecimal}} --setopt=install_weak_deps=False --best install $KERNEL_MODULES_EXTRA  

    # Install realtime kernel TODO
    ls /extensions/kernel-rt*

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.SpecialResource.Name}}-entrypoint
data:
  entrypoint.sh: |-
    #!/bin/bash -x 
    set -e
    cd /tmp

    yum -y install buildah git make --setopt=install_weak_deps=False

    git clone {{.SpecialResource.Spec.DriverContainer.Source.Git.Uri}}

    source /bin/buildah-helper.sh

    UNAME=$(uname -r)
    SCRIPT_NAME=install-dependencies.sh
    TAG={{.SpecialResource.Spec.Metadata.Namespace}}/{{.SpecialResource.Name}}:v${UNAME}

   
    # --------- Container instructions START ----------------------------------
 
    MOUNT_MACHINE_OS_CONTENT

    FROM registry.access.redhat.com/ubi8/ubi

    WORKINGDIR /tmp
 
    COPY /bin/${SCRIPT_NAME} .
    RUNV bash -c $(pwd)/${SCRIPT_NAME}
 
    # Install directly into the chroot, this way we do not have to install
    # additinoal packages like git into the container to install from a git repo
    # The deps are resolved by the outer image. 
    MOUNT
    cd kmods-via-containers
    make install DESTDIR=${MNT}/usr/local CONFDIR=${MNT}/etc/
    UMOUNT

    COMMIT ${TAG}
    PUSH   ${TAG} image-registry.openshift-image-registry.svc:5000/${TAG}

    UMOUNT_MACHINE_OS_CONTENT

    # --------- Container instructions END ------------------------------------

    # startupprobe readonlyfilesystem would prevent writing to /
    touch /tmp/ready
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
  resourceNames:
  - hostaccess
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
subjects:
- kind: ServiceAccount
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
userNames:
- system:serviceaccount:{{.SpecialResource.Spec.Metadata.Namespace}}:{{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
---
apiVersion: v1
kind: Pod
metadata:
  annotations: 
    specialresource.openshift.io/proxy: "true"
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/wait-for-logs: "touch /tmp/ready"

  labels:
    app: {{.SpecialResource.Name}}
  name: {{.SpecialResource.Name}}
spec:
  #serviceAccount: builder
  #serviceAccountName: builder
  serviceAccount: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
  serviceAccountName: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}-{{.OperatingSystemMajor}}
  restartPolicy: OnFailure
  containers:
  - name: {{.SpecialResource.Name}}-ctr
    image: registry.access.redhat.com/ubi8:latest
    command: [/bin/entrypoint.sh]
    securityContext:
      seLinuxOptions:
        type: spc_t
    volumeMounts:
        - name: entrypoint
          mountPath: /bin/entrypoint.sh
          readOnly: true
          subPath: entrypoint.sh
        - name: install-dependencies
          mountPath: /bin/install-dependencies.sh
          readOnly: true
          subPath: install-dependencies.sh
        - name: buildah-helper
          mountPath: /bin/buildah-helper.sh
          readOnly: true
          subPath: buildah-helper.sh
        - name: authfile
          mountPath: /var/lib/kubelet
          readOnly: true
        - name: dockercfg
          mountPath: /root
          readOnly: true
    startupProbe:
      exec:
        command: [sh, -c, 'ls /tmp/ready']
      initialDelaySeconds: 10
      failureThreshold: 60
      successThreshold: 1
      periodSeconds: 5
  volumes:
    - name: dockercfg
      secret:
        secretName: {{.PushSecretName}}
    - name: authfile
      hostPath:
        path: /var/lib/kubelet
    - name: entrypoint
      configMap:
        defaultMode: 0700
        name: {{.SpecialResource.Name}}-entrypoint
    - name: install-dependencies
      configMap:
        defaultMode: 0700
        name: {{.SpecialResource.Name}}-install-dependencies
    - name: buildah-helper
      configMap:
        defaultMode: 0700
        name: {{.SpecialResource.Name}}-buildah-helper
